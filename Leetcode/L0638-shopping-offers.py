# https://leetcode.com/problems/shopping-offers/

from functools import lru_cache

# Runtime: 64 ms (89.70%)
# Memory: 14.3 MB (81.64%)

counter = 0


def shoppingOffers(price, special, needs):
    l = len(price)

    # for i in range(l):  # 这些不应加入遍历的选项，会极大的增加遍历的复杂度
    #     special.append([1 if x == i else 0 for x in range(l)] + [price[i]])

    # @lru_cache(None)  # 标准的DP应该用这个，但这个问题剪枝后用不上了，主要在于index的引入，缓存也更节省
    def min_price_func(corr, index):
        min_price = sum([price[i] * corr[i] for i in range(l)])  # 初始化，以直接购买为基准。这里是第一个优化关键！
        print(corr, index, min_price)

        for _index, offer in enumerate(special[index:]):  # 此处是第二个优化关键
            # index前的offer在大的问题上都没法用，就更不用在小一层的问题上检索了
            if any(offer[i] > corr[i] for i in range(l)): continue
            prev_corr = [corr[i] - offer[i] for i in range(l)]
            min_price = min(min_price_func(prev_corr, _index) + offer[-1], min_price)
        print(min_price)
        return min_price

    return min_price_func(needs, 0)


# price, special, needs = [2,5], [[3,0,5],[1,2,10]], [3,2]  # 14
price, special, needs = [2,3,4], [[1,1,0,4],[2,2,1,9]], [1,2,1]  # 11
# price, special, needs = [2,3,4], [[1,1,0,4],[2,2,1,9]], [0,0,0]  # 0
# price, special, needs = [1,2,3,1,9,9], [[6,3,5,6,1,0,17],[6,6,6,5,2,2,2],[5,2,2,1,4,1,1],[6,4,4,4,0,4,19],[4,6,0,1,0,4,3],[1,2,0,5,0,4,13],[2,5,1,0,0,3,8],[4,3,1,3,5,3,11],[6,1,0,1,5,6,23],[5,3,1,0,3,6,7],[3,4,0,6,2,1,6],[0,3,6,3,4,0,2],[2,2,3,6,3,2,1],[6,1,1,4,2,0,2],[5,6,6,2,1,4,20],[1,4,5,2,5,4,9],[2,3,2,2,5,4,4],[6,6,0,3,0,6,23],[0,6,1,5,6,5,2],[0,0,6,0,4,5,17],[0,0,5,2,3,5,7],[6,0,5,3,6,3,2],[4,3,5,4,0,6,15],[6,2,1,5,2,1,15]], [5,6,5,5,6,1]
# price, special, needs = [0,0,0], [[1,1,0,4],[2,2,1,9]], [2,2,1]  # 0
# price, special, needs = [2,3], [[1,0,1],[0,1,2]], [1,1]  # 3
# price, special, needs = [4,7,9,9,3,2], [[0,0,4,6,2,0,22],[1,4,3,5,5,3,10],[4,5,6,3,4,1,29],[0,3,2,2,4,2,4],[4,6,3,4,4,6,21],[5,6,3,6,3,4,23],[6,1,3,4,6,2,9],[3,3,6,1,5,1,16],[0,3,6,4,0,2,5],[5,1,2,3,5,5,7],[0,1,1,6,2,4,24],[1,5,2,2,6,1,3],[4,2,2,4,3,1,8],[3,1,0,6,1,2,30],[4,6,1,4,0,0,2],[0,4,5,6,2,5,1],[2,6,0,6,6,2,21],[2,1,3,4,0,2,2],[6,4,4,4,1,3,24],[6,3,1,6,5,5,12],[1,3,2,1,3,2,32],[2,2,0,3,1,2,16],[2,4,3,6,6,5,26],[1,6,3,5,0,4,2],[6,2,1,5,6,2,9],[0,4,2,2,5,3,3],[6,3,3,6,0,5,9],[4,3,2,5,3,3,29],[1,6,0,0,1,6,31],[5,6,0,5,4,3,31],[0,4,2,6,0,6,28],[5,4,3,2,5,3,32],[6,5,1,1,4,6,18],[3,3,3,2,3,3,2],[5,6,2,5,3,3,7],[1,2,6,4,4,0,18],[0,4,4,0,0,3,18],[4,2,0,0,3,3,19],[6,0,4,4,4,6,15],[6,2,3,0,2,2,4],[4,1,1,5,5,5,14],[3,6,4,0,6,2,27],[2,4,6,2,2,3,24],[6,0,5,3,1,6,7],[3,1,5,1,2,6,28],[5,2,2,1,1,4,25],[5,6,5,0,3,4,19],[3,5,3,3,5,1,31],[6,0,1,1,6,4,14],[0,3,4,3,3,4,10],[4,1,2,2,0,0,27],[2,2,1,3,5,2,24],[2,3,2,6,1,1,21],[6,6,5,6,2,2,12],[6,6,3,1,0,6,28],[6,4,1,6,5,0,8],[3,3,0,5,4,2,7],[4,3,3,3,0,2,25],[1,2,0,5,2,4,8],[0,1,6,6,5,5,27],[3,6,4,5,2,2,4],[4,4,6,1,5,3,30],[4,3,4,5,5,5,19],[0,0,0,6,1,0,27],[6,5,0,1,2,4,10],[2,6,0,0,1,0,13],[4,1,6,1,4,1,24],[2,4,0,1,4,1,25],[5,1,3,3,4,1,8],[5,5,1,0,2,1,25],[1,6,2,4,0,6,27],[4,0,3,0,5,3,30],[2,4,6,6,3,2,4],[6,4,2,2,0,3,27],[1,2,1,2,2,1,2],[2,0,3,0,5,4,4],[3,5,4,4,1,1,25],[2,1,1,6,3,3,28],[4,4,4,3,6,3,21],[1,4,1,4,2,2,27],[0,6,0,2,2,2,33],[3,3,5,6,4,6,9],[1,0,0,3,4,2,11],[1,3,0,3,0,1,16],[2,3,0,0,0,5,1],[3,5,6,4,1,4,3],[3,1,0,2,6,0,19],[3,0,0,5,3,1,6],[1,0,4,1,2,2,18],[0,0,4,3,5,1,31],[4,4,2,5,5,2,2],[5,0,2,6,5,3,4],[6,2,1,0,2,3,11],[4,5,1,5,3,3,23],[6,2,5,1,6,6,4],[5,6,6,1,5,6,6],[3,2,6,1,4,5,19],[0,2,6,2,5,0,26],[0,1,3,6,3,6,18],[3,5,4,6,5,3,6]], [6,6,6,6,6,6]

print(shoppingOffers(price, special, needs))